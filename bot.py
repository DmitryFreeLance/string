from __future__ import annotations

import asyncio
import logging
import os
import uuid
import tempfile
import json
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, FSInputFile, InlineKeyboardMarkup,
    InlineKeyboardButton, CallbackQuery, ContentType
)
from PIL import Image

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
BOT_TOKEN = "7791601838:AAGKBsubpH1TzLYafINnCwz315Lf1qvkjxU"  # <--- –∑–∞–º–µ–Ω–∏
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
STRINGART_SCRIPT = os.path.join(BASE_DIR, "stringart", "generate.py")
OUTPUT_DIR = os.path.join(BASE_DIR, "output")
os.makedirs(OUTPUT_DIR, exist_ok=True)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ê–¥–º–∏–Ω—ã (–∫—Ç–æ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–¥—ã)
ADMIN_IDS = {726773708}  # <--- –í—Å—Ç–∞–≤—å —Å–≤–æ–π telegram user_id (int)

# –ü—Ä–µ–≤—å—é –¥–ª—è Telegram
PREVIEW_MAX_SIDE = 1600
PREVIEW_JPEG_QUALITY = 90

# –ì–≤–æ–∑–¥–∏/–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
NAIL_STEP_FOR_340 = "3"

# ===== –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è –ë–î –∫–æ–¥–æ–≤ =====
CODES_FILE = os.path.join(BASE_DIR, "codes.json")

def load_codes_db() -> dict:
    if os.path.exists(CODES_FILE):
        try:
            with open(CODES_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                # –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: { CODE: {"limit": int, "used_images": int, "bound_to": int|None} }
                return data
        except Exception:
            pass
    # –¥–µ—Ñ–æ–ª—Ç (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
    return {
        "DEMO-5": {"limit": 5, "used_images": 0, "bound_to": None},
    }

def save_codes_db(data: dict) -> None:
    with open(CODES_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

CODES_DB = load_codes_db()

# user_codes[user_id] = "CODE"
user_codes: dict[int, str] = {}

# user_results[uid][idx] = {"png": path, "xlsx": path}
user_results: dict[int, dict[str, dict]] = {}

# –ö—Ç–æ —Å–µ–π—á–∞—Å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç (—á—Ç–æ–±—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ/–∫–æ–º–∞–Ω–¥—ã)
user_busy: set[int] = set()

# ===== –£—Ç–∏–ª–∏—Ç—ã –∫–æ–¥–æ–≤ =====
def get_code_status(code: str):
    rec = CODES_DB.get(code)
    if not rec:
        return None
    left = max(rec["limit"] - rec.get("used_images", 0), 0)
    return {"limit": rec["limit"], "used": rec.get("used_images", 0), "left": left, "bound_to": rec.get("bound_to")}

def bind_code_to_user(uid: int, code: str):
    rec = CODES_DB.get(code)
    if not rec:
        return False, "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."
    if rec.get("bound_to") is None or rec.get("bound_to") == uid:
        rec["bound_to"] = uid
        CODES_DB[code] = rec
        user_codes[uid] = code
        save_codes_db(CODES_DB)
        return True, "–ö–æ–¥ –ø—Ä–∏–≤—è–∑–∞–Ω."
    return False, "–≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É."

def can_use_code(uid: int) -> tuple[bool, str | None]:
    code = user_codes.get(uid)
    if not code:
        return False, "–ö–æ–¥ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ: /status –í–ê–®_–ö–û–î"
    st = get_code_status(code)
    if not st:
        return False, "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."
    if st["left"] <= 0:
        return False, "–ü–æ –≤–∞—à–µ–º—É –∫–æ–¥—É –ª–∏–º–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥: /status –ù–û–í–´–ô_–ö–û–î"
    return True, None

def inc_code_usage(uid: int):
    code = user_codes.get(uid)
    if not code:
        return
    rec = CODES_DB.get(code)
    if not rec:
        return
    rec["used_images"] = rec.get("used_images", 0) + 1
    CODES_DB[code] = rec
    save_codes_db(CODES_DB)

# ===== –†–∞–±–æ—Ç–∞ —Å –ø—Ä–µ–≤—å—é =====
def make_preview_jpeg(src_png: str) -> str:
    img = Image.open(src_png).convert("RGB")
    w, h = img.size
    k = PREVIEW_MAX_SIDE / max(w, h) if max(w, h) > PREVIEW_MAX_SIDE else 1.0
    if k < 1.0:
        img = img.resize((int(w * k), int(h * k)), Image.LANCZOS)
    prev_path = src_png.rsplit(".", 1)[0] + "_preview.jpg"
    img.save(prev_path, "JPEG", quality=PREVIEW_JPEG_QUALITY, optimize=True)
    return prev_path

# ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====
def kb_more_status(uid: int):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ", callback_data=f"more_{uid}"),
        InlineKeyboardButton(text="‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data=f"status_{uid}")
    ]])

def kb_instruction(uid: int, idx: int):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (Excel)", callback_data=f"choose_{uid}_{idx}")
    ]])

# ===== –ò–º–ø–æ—Ä—Ç –∫–æ–¥–æ–≤ –∞–¥–º–∏–Ω–æ–º =====
def parse_codes_from_text(text: str) -> list[str]:
    text = text.replace("Ôºõ", ";").replace("„ÄÅ", ",").replace("‚Äî", "-")
    raw_parts = [p.strip() for p in text.replace(";", ",").split(",")]
    parts = [p for p in raw_parts if p]
    return parts

def add_codes_to_db(parts: list[str], default_limit: int = 5) -> tuple[int, int]:
    added, updated = 0, 0
    for part in parts:
        code = part
        limit = default_limit
        if ":" in part:
            code, lim = part.split(":", 1)
            code = code.strip()
            try:
                limit = max(0, int(lim.strip()))
            except:
                limit = default_limit
        if not code:
            continue
        if code in CODES_DB:
            if CODES_DB[code].get("limit") != limit:
                CODES_DB[code]["limit"] = limit
                updated += 1
        else:
            CODES_DB[code] = {"limit": limit, "used_images": 0, "bound_to": None}
            added += 1
    save_codes_db(CODES_DB)
    return added, updated

# ===== –ö–æ–º–∞–Ω–¥—ã =====
@dp.message(Command("start"))
async def cmd_start(message: Message):
    uid = message.from_user.id
    if uid in user_busy:
        await message.answer("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    hello = (
        "‚ú® StringArt –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, —è —Å–¥–µ–ª–∞—é 3 —Ü–≤–µ—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ:\n"
        "‚Ä¢ 360 –≥–≤–æ–∑–¥–µ–π, 4500 –Ω–∏—Ç–µ–π\n"
        "‚Ä¢ 360 –≥–≤–æ–∑–¥–µ–π, 5000 –Ω–∏—Ç–µ–π\n"
        "‚Ä¢ 360 –≥–≤–æ–∑–¥–µ–π, 5500 –Ω–∏—Ç–µ–π\n\n"
        "–ó–∞—Ç–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –ø—Ä–∏—à–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ Excel.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞: /status ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ–¥ –∏ —É–∑–Ω–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫.\n"
        "(–ü–æ –æ–¥–Ω–æ–º—É –∫–æ–¥—É –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.)"
    )
    await message.answer(hello)

@dp.message(Command("status"))
async def cmd_status(message: Message):
    uid = message.from_user.id
    if uid in user_busy:
        await message.answer("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    args = message.text.strip().split(maxsplit=1)
    if len(args) == 2:
        code = args[1].strip()
        ok, msg = bind_code_to_user(uid, code)
        if not ok:
            await message.answer("‚ùå " + msg)
            return
        await message.answer("‚úÖ " + msg)

    code = user_codes.get(uid)
    if not code:
        await message.answer("–ö–æ–¥ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/status –í–ê–®_–ö–û–î`", parse_mode=None)
        return

    st = get_code_status(code)
    if not st:
        await message.answer("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await message.answer(
        f"–ö–æ–¥: {code}\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: {st['left']} –∏–∑ {st['limit']}\n"
        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
    )

@dp.message(Command("add"))
async def cmd_add_codes(message: Message):
    uid = message.from_user.id
    if uid not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    if uid in user_busy:
        await message.answer("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (—É –≤–∞—Å). –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    parts_raw = message.text.split(maxsplit=1)
    if len(parts_raw) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /add CODE1,CODE2 –∏–ª–∏ /add CODE1:5,CODE2:10")
        return

    parts = parse_codes_from_text(parts_raw[1])
    if not parts:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç.")
        return

    added, updated = add_codes_to_db(parts, default_limit=5)
    await message.answer(f"–ò–º–ø–æ—Ä—Ç: –¥–æ–±–∞–≤–ª–µ–Ω–æ {added}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated}. –í—Å–µ–≥–æ –∫–æ–¥–æ–≤: {len(CODES_DB)}")

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–æ–º (docx/txt/csv) =====
@dp.message(F.document)
async def handle_doc_codes(message: Message):
    uid = message.from_user.id
    if uid not in ADMIN_IDS:
        return
    if uid in user_busy:
        await message.answer("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (—É –≤–∞—Å). –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    from docx import Document  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, –µ—Å–ª–∏ docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –æ—Ç–≤–∞–ª–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç—É—Ç

    doc = message.document
    file_name = (doc.file_name or "").lower()
    allowed = file_name.endswith(".docx") or file_name.endswith(".txt") or file_name.endswith(".csv")
    if not allowed:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ .docx, .txt –∏–ª–∏ .csv —Å –∫–æ–¥–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return

    tmp_fd, tmp_path = tempfile.mkstemp(suffix=os.path.splitext(file_name)[1])
    os.close(tmp_fd)
    try:
        await bot.download(doc, destination=tmp_path)

        text = ""
        if file_name.endswith(".docx"):
            try:
                d = Document(tmp_path)
                text = "\n".join(p.text for p in d.paragraphs)
            except Exception as e:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .docx: {e}")
                return
        else:
            try:
                with open(tmp_path, "r", encoding="utf-8") as f:
                    text = f.read()
            except UnicodeDecodeError:
                with open(tmp_path, "r", encoding="cp1251") as f:
                    text = f.read()

        if not text.strip():
            await message.answer("–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")
            return

        parts = parse_codes_from_text(text)
        if not parts:
            await message.answer("–ù–µ –Ω–∞—à—ë–ª –∫–æ–¥–æ–≤. –§–æ—Ä–º–∞—Ç: CODE1,CODE2 –∏–ª–∏ CODE:LIMIT.")
            return

        added, updated = add_codes_to_db(parts, default_limit=5)
        await message.answer(f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}, –≤—Å–µ–≥–æ: {len(CODES_DB)}")
    finally:
        try:
            os.remove(tmp_path)
        except:
            pass

# ===== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ =====
@dp.message(F.photo)
async def handle_photo(message: Message):
    uid = message.from_user.id

    # –ë–ª–æ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    if uid in user_busy:
        await message.answer("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –ª–∏–º–∏—Ç–∞
    ok, err = can_use_code(uid)
    if not ok:
        await message.answer("‚ùå " + err)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    input_fd, input_path = tempfile.mkstemp(suffix=".jpg")
    os.close(input_fd)
    await bot.download(photo, destination=input_path)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if uid not in user_results:
        user_results[uid] = {}

    # –ü–æ–º–µ—á–∞–µ–º ¬´–∑–∞–Ω—è—Ç¬ª
    user_busy.add(uid)

    # –°–ø–∏—Å—ã–≤–∞–µ–º 1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–æ–¥–Ω–æ —Ñ–æ—Ç–æ = 1 —Å–ø–∏—Å–∞–Ω–∏–µ)
    inc_code_usage(uid)

    try:
        configs = [
            {"pull_amount": "1500", "label": "–í–∞—Ä–∏–∞–Ω—Ç 1 ‚Äî 360 –≥–≤–æ–∑–¥–µ–π, 4500 –Ω–∏—Ç–µ–π"},
            {"pull_amount": "2000", "label": "–í–∞—Ä–∏–∞–Ω—Ç 2 ‚Äî 360 –≥–≤–æ–∑–¥–µ–π, 5000 –Ω–∏—Ç–µ–π"},
            {"pull_amount": "2500", "label": "–í–∞—Ä–∏–∞–Ω—Ç 3 ‚Äî 360 –≥–≤–æ–∑–¥–µ–π, 5500 –Ω–∏—Ç–µ–π"},
        ]

        for idx, cfg in enumerate(configs, start=1):
            output_png = os.path.join(OUTPUT_DIR, f"{uuid.uuid4()}.png")
            output_xlsx = f"{output_png}_instruction.xlsx"

            cmd = [
                "python", STRINGART_SCRIPT,
                "-i", input_path,
                "-o", output_png,
                "-d", "3000",
                "-s", "1",
                "-n", NAIL_STEP_FOR_340,
                "-l", cfg["pull_amount"],
                "-longside", "385",
                "--rgb",
                "--wb"
            ]

            progress_msg = await message.answer(f"‚è≥ {cfg['label']}: 0%")
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )

            last_progress = None
            # —á–∏—Ç–∞–µ–º stdout –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            while True:
                line = await process.stdout.readline()
                if not line:
                    break
                text = line.decode(errors="ignore").strip()
                if text.endswith("%") and text != last_progress:
                    last_progress = text
                    try:
                        await progress_msg.edit_text(f"‚è≥ {cfg['label']}: {text}")
                    except Exception:
                        pass

            await process.wait()
            stderr = (await process.stderr.read()).decode(errors="ignore")

            if process.returncode == 0 and os.path.exists(output_png):
                try:
                    await progress_msg.edit_text(f"‚úÖ {cfg['label']}: –≥–æ—Ç–æ–≤–æ")
                except Exception:
                    pass

                # –ø–æ–ª–æ–∂–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ Excel –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–≤—å—é
                user_results.setdefault(uid, {})
                user_results[uid][str(idx)] = {"png": output_png, "xlsx": output_xlsx}

                # –û—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–µ–≤—å—é/–¥–æ–∫ —Å—Ä–∞–∑—É –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                try:
                    preview_path = make_preview_jpeg(output_png)
                    photo_file = FSInputFile(preview_path)
                    await message.answer_photo(
                        photo_file,
                        caption=cfg["label"],
                        reply_markup=kb_instruction(uid, idx)
                    )
                    try:
                        os.remove(preview_path)
                    except:
                        pass
                except Exception:
                    # —Ä–µ–∑–µ—Ä–≤: —à–ª—ë–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                    try:
                        doc = FSInputFile(output_png)
                        await message.answer_document(
                            doc, caption=cfg["label"], reply_markup=kb_instruction(uid, idx)
                        )
                    except Exception as e:
                        await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

                # –°–æ–æ–±—â–∏–º, –µ—Å–ª–∏ Excel –Ω–µ —Å–æ–∑–¥–∞–Ω
                if not os.path.exists(output_xlsx):
                    await message.answer(
                        "‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Excel –¥–ª—è —ç—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. "
                        "–ï—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–∑–∂–µ."
                    )
            else:
                try:
                    await progress_msg.edit_text(f"‚ùå {cfg['label']}: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                except Exception:
                    pass
                await message.answer(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ¬´{cfg['label']}¬ª:\n{stderr or '–Ω–µ—Ç –ª–æ–≥–∞'}")

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º —É –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.\n"
            "–ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ ‚Äî –Ω–∞–∂–º–∏ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ¬ª.",
            reply_markup=kb_more_status(uid)
        )

    finally:
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
        user_busy.discard(uid)
        # –ß–∏—Å—Ç–∏–º –≤—Ö–æ–¥
        if os.path.exists(input_path):
            try:
                os.remove(input_path)
            except:
                pass

# ===== –ö–Ω–æ–ø–∫–∏ =====
@dp.callback_query(F.data.startswith("choose_"))
async def handle_choice(callback: CallbackQuery):
    try:
        _, uid, idx = callback.data.split("_")
        uid = int(uid)
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ Excel —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–∞–∂–µ –µ—Å–ª–∏ user_busy
    if uid not in user_results or idx not in user_results[uid]:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    files = user_results[uid][idx]
    xlsx_path = files.get("xlsx")
    png_path = files.get("png")

    if xlsx_path and os.path.exists(xlsx_path):
        doc = FSInputFile(xlsx_path)
        await callback.message.answer_document(doc, caption="üìä –í–∞—à–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (Excel)")
        # –ø–æ –∂–µ–ª–∞–Ω–∏—é ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏:
        try:
            os.remove(xlsx_path)
        except:
            pass
    else:
        await callback.message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")

    # –ú–æ–∂–Ω–æ –ø–æ–¥—á–∏—Å—Ç–∏—Ç—å PNG, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω
    if png_path and os.path.exists(png_path):
        try:
            os.remove(png_path)
        except:
            pass

    # –£–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    try:
        del user_results[uid][idx]
        if not user_results[uid]:
            del user_results[uid]
    except:
        pass

    await callback.answer()

@dp.callback_query(F.data.startswith("more_"))
async def handle_more(callback: CallbackQuery):
    uid = int(callback.data.split("_")[1])
    if uid in user_busy:
        await callback.message.answer("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    else:
        await callback.message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —Å–¥–µ–ª–∞—é —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞!")
    await callback.answer()

@dp.callback_query(F.data.startswith("status_"))
async def handle_inline_status(callback: CallbackQuery):
    uid = int(callback.data.split("_")[1])
    code = user_codes.get(uid)
    if not code:
        await callback.message.answer("–ö–æ–¥ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/status –í–ê–®_–ö–û–î`")
        await callback.answer()
        return
    st = get_code_status(code)
    if not st:
        await callback.message.answer("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await callback.message.answer(f"–ö–æ–¥: {code}\n–î–æ—Å—Ç—É–ø–Ω–æ: {st['left']} –∏–∑ {st['limit']}")
    await callback.answer()

# –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∫—Ä–æ–º–µ /add —É –∞–¥–º–∏–Ω–æ–≤ –∏ /status –±–µ–∑ –∫–æ–¥–∞?)
@dp.message(F.text & ~F.photo & ~F.document)
async def generic_text(message: Message):
    uid = message.from_user.id
    text = (message.text or "").strip()
    if text.startswith("/"):
        # –∫–æ–º–∞–Ω–¥—ã –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if uid in user_busy:
            await message.answer("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return
    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –ø–æ–∫—Ä—ã—Ç—ã

# ===== –ó–∞–ø—É—Å–∫ =====
async def main():
    # –°–±—Ä–æ—Å webhook (–Ω–∞ –≤—Å—è–∫–∏–π)
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())