import asyncio
import logging
import os
import uuid
import tempfile
from glob import glob
from datetime import datetime
from typing import Optional, Dict, Any, Set

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, FSInputFile, InlineKeyboardMarkup,
    InlineKeyboardButton, CallbackQuery
)
from PIL import Image

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
BOT_TOKEN = "7791601838:AAGKBsubpH1TzLYafINnCwz315Lf1qvkjxU"   # <-- –ü–û–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
STRINGART_SCRIPT = os.path.join(BASE_DIR, "stringart", "generate.py")
OUTPUT_DIR = os.path.join(BASE_DIR, "output")
os.makedirs(OUTPUT_DIR, exist_ok=True)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

NAIL_STEP_FOR_340 = "3"
PREVIEW_MAX_SIDE = 1600
PREVIEW_JPEG_QUALITY = 90

# –°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –∫–æ–¥—É
IMAGES_LIMIT_PER_CODE = 5

# ================== –ü–†–û–°–¢–ê–Ø "–ë–ê–ó–ê" –ö–û–î–û–í ==================
# —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞:
# CODES_DB[code] = {"images_limit": int, "images_used": int, "bound_to": Optional[user_id]}
CODES_DB: Dict[str, Dict[str, Any]] = {
    "DEMO-5": {"images_limit": 5, "images_used": 0, "bound_to": None},
    "VIP-5": {"images_limit": 5, "images_used": 0, "bound_to": None},
}

# user_codes[user_id] = bound_code
user_codes: Dict[int, str] = {}
# user_results[uid][idx] = {"png": path_to_png, "xlsx": path_to_xlsx or None, "png_mtime": float}
user_results: Dict[int, Dict[str, Dict[str, Any]]] = {}
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–π—á–∞—Å –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ)
busy_users: Set[int] = set()


# ================== –£–¢–ò–õ–ò–¢–´ ==================
def make_preview_jpeg(src_png: str) -> str:
    img = Image.open(src_png).convert("RGB")
    w, h = img.size
    k = PREVIEW_MAX_SIDE / max(w, h) if max(w, h) > PREVIEW_MAX_SIDE else 1.0
    if k < 1.0:
        img = img.resize((int(w * k), int(h * k)), Image.LANCZOS)
    prev_path = src_png.rsplit(".", 1)[0] + "_preview.jpg"
    img.save(prev_path, "JPEG", quality=PREVIEW_JPEG_QUALITY, optimize=True)
    return prev_path


def get_code_status(code: str) -> Optional[Dict[str, int]]:
    rec = CODES_DB.get(code)
    if not rec:
        return None
    left = max(rec["images_limit"] - rec["images_used"], 0)
    return {"limit": rec["images_limit"], "used": rec["images_used"], "left": left}


def bind_code_to_user(uid: int, code: str):
    rec = CODES_DB.get(code)
    if not rec:
        return False, "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ."
    if rec["bound_to"] is None or rec["bound_to"] == uid:
        rec["bound_to"] = uid
        user_codes[uid] = code
        return True, "‚úÖ –ö–æ–¥ –ø—Ä–∏–≤—è–∑–∞–Ω."
    return False, "‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É."


def dec_image_use(uid: int):
    """–°–ø–∏—Å–∞—Ç—å 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–µ—Å—Å–∏—é –∏–∑ 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤) —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞."""
    code = user_codes.get(uid)
    if not code:
        return
    rec = CODES_DB.get(code)
    if not rec:
        return
    rec["images_used"] = min(rec["images_used"] + 1, rec["images_limit"])


def _find_instruction_near_png(png_path: str) -> Optional[str]:
    """
    –ò—â–µ—Ç —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä—è–¥–æ–º —Å png:
      - <png>.png_instruction.xlsx
      - <png>_instruction.xlsx
      - *instruction*.xlsx
    """
    folder = os.path.dirname(png_path)
    base_with_ext = os.path.basename(png_path)        # abc.png
    base_no_ext, _ = os.path.splitext(base_with_ext)  # abc

    candidates = [
        os.path.join(folder, base_with_ext + "_instruction.xlsx"),
        os.path.join(folder, base_no_ext + "_instruction.xlsx"),
    ]
    patterns = [
        os.path.join(folder, f"{base_no_ext}*instruction*.xlsx"),
        os.path.join(folder, f"{base_with_ext}*instruction*.xlsx"),
        os.path.join(folder, "*instruction*.xlsx"),
    ]
    for patt in patterns:
        candidates.extend(glob(patt))

    seen = []
    for c in candidates:
        if c not in seen:
            seen.append(c)

    for path in seen:
        if os.path.exists(path):
            return path
    return None


def _find_recent_xlsx(output_dir: str, ref_time: float, window_sec: int = 600) -> Optional[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç .xlsx –≤ –ø–∞–ø–∫–µ output, —Å–æ–∑–¥–∞–Ω–Ω—ã–π/–∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ –∫ ref_time."""
    xlsx_files = glob(os.path.join(output_dir, "*.xlsx"))
    if not xlsx_files:
        return None

    best = None
    best_dt = None
    for path in xlsx_files:
        try:
            mtime = os.path.getmtime(path)
        except Exception:
            continue
        dt = abs(mtime - ref_time)
        if dt <= window_sec:
            if best is None or dt < best_dt:
                best = path
                best_dt = dt

    if not best:
        try:
            best = max(xlsx_files, key=lambda p: os.path.getmtime(p))
        except Exception:
            best = None
    return best


# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==================
def kb_more_status(uid: int):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ", callback_data=f"more_{uid}"),
        InlineKeyboardButton(text="‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data=f"status_{uid}")
    ]])


def kb_instruction(uid: int, idx: int):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (Excel)", callback_data=f"choose_{uid}_{idx}")
    ]])


# ================== –•–ï–õ–ü–ï–† ‚Äú–∑–∞–Ω—è—Ç–æ—Å—Ç–∏‚Äù ==================
def is_busy(uid: int) -> bool:
    return uid in busy_users

def require_not_busy(func):
    """
    –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã/—Ñ–æ—Ç–æ, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è.
    –í–ê–ñ–ù–û: –Ω–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º **kwargs –≤ —Å–∞–º —Ö–µ–Ω–¥–ª–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ
    TypeError: ... unexpected keyword argument 'dispatcher'
    """
    async def wrapper(message: Message, *args, **kwargs):
        uid = message.from_user.id
        if is_busy(uid):
            await message.answer("‚è≥ –ò–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. Excel –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ.")
            return
        # —Ö–µ–Ω–¥–ª–µ—Ä—ã —É —Ç–µ–±—è –∏–º–µ—é—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ (message: Message),
        # –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ message –∏ –ù–ò–ß–ï–ì–û –∏–∑ kwargs
        return await func(message)
    return wrapper
# ================== –ö–û–ú–ê–ù–î–´ ==================
@dp.message(Command("start"))
@require_not_busy
async def cmd_start(message: Message):
    await message.answer(
        "‚ú® StringArt –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è\n\n"
        "–Ø —Å–¥–µ–ª–∞—é —Ç—Ä–∏ —Ü–≤–µ—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–∞—Ä—Ç–∏–Ω—ã –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ:\n"
        "‚Ä¢ ‚âà340 –≥–≤–æ–∑–¥–µ–π, 4500 –Ω–∏—Ç–µ–π\n"
        "‚Ä¢ ‚âà340 –≥–≤–æ–∑–¥–µ–π, 5000 –Ω–∏—Ç–µ–π\n"
        "‚Ä¢ ‚âà340 –≥–≤–æ–∑–¥–µ–π, 5500 –Ω–∏—Ç–µ–π\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –ø—Ä–∏—à–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ Excel.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ /status ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ–¥ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–æ–∫.\n"
        "–ö–æ–º–∞–Ω–¥–∞ /add –∫–æ–¥1,–∫–æ–¥2,... ‚Äî –º–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥—ã (–ª–∏–º–∏—Ç 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –∫–æ–¥)."
    )


@dp.message(Command("status"))
@require_not_busy
async def cmd_status(message: Message):
    uid = message.from_user.id
    args = message.text.strip().split(maxsplit=1)
    if len(args) == 2:
        code = args[1].strip()
        ok, msg = bind_code_to_user(uid, code)
        if not ok:
            await message.answer(msg)
            return

    code = user_codes.get(uid)
    if not code:
        await message.answer("‚ÑπÔ∏è –ö–æ–¥ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /status –í–ê–®_–ö–û–î")
        return

    st = get_code_status(code)
    if not st:
        await message.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await message.answer(
        f"üîê –ö–æ–¥: {code}\n"
        f"üì¶ –õ–∏–º–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {st['limit']}\n"
        f"üßÆ –ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ: {st['used']}\n"
        f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å: {st['left']}\n"
        f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
    )


@dp.message(Command("add"))
@require_not_busy
async def cmd_add(message: Message):
    """
    /add code1,code2,code3
    –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–¥—ã –≤ –±–∞–∑—É —Å –ª–∏–º–∏—Ç–æ–º IMAGES_LIMIT_PER_CODE –Ω–∞ –∫–∞–∂–¥—ã–π.
    """
    text = message.text.strip()
    parts = text.split(maxsplit=1)
    if len(parts) != 2 or not parts[1].strip():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add –∫–æ–¥1,–∫–æ–¥2,–∫–æ–¥3")
        return

    raw = parts[1]
    tokens = [t.strip() for t in raw.replace("\n", ",").split(",")]
    tokens = [t for t in tokens if t]

    if not tokens:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª –∫–æ–¥–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ. –ü—Ä–∏–º–µ—Ä: /add ABC123, XYZ-999")
        return

    added = 0
    skipped = 0
    for code in tokens:
        if code in CODES_DB:
            skipped += 1
            continue
        CODES_DB[code] = {
            "images_limit": IMAGES_LIMIT_PER_CODE,
            "images_used": 0,
            "bound_to": None
        }
        added += 1

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–æ–¥–æ–≤: {added}\n‚Ü™Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –µ—Å—Ç—å): {skipped}\n–õ–∏–º–∏—Ç –Ω–∞ –∫–æ–¥: {IMAGES_LIMIT_PER_CODE} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")


# ================== –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ==================
@dp.message(F.photo)
@require_not_busy
async def handle_photo(message: Message):
    uid = message.from_user.id

    # —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ–¥
    code = user_codes.get(uid)
    if not code:
        await message.answer("üîê –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∫–æ–¥: /status –í–ê–®_–ö–û–î")
        return

    st = get_code_status(code)
    if not st:
        await message.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /status –ù–û–í–´–ô_–ö–û–î")
        return
    if st["left"] <= 0:
        await message.answer("‚ö†Ô∏è –ü–æ –≤–∞—à–µ–º—É –∫–æ–¥—É –ª–∏–º–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ /status –ù–û–í–´–ô_–ö–û–î.")
        return

    # –ø–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω—è—Ç—ã–º –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    busy_users.add(uid)

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    user_results.setdefault(uid, {})

    try:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        photo = message.photo[-1]
        input_fd, input_path = tempfile.mkstemp(suffix=".jpg")
        os.close(input_fd)
        await bot.download(photo, destination=input_path)

        configs = [
            {"pull_amount": "4500", "label": "–í–∞—Ä–∏–∞–Ω—Ç 1 ‚Äî ‚âà340 –≥–≤–æ–∑–¥–µ–π, 4500 –Ω–∏—Ç–µ–π"},
            {"pull_amount": "5000", "label": "–í–∞—Ä–∏–∞–Ω—Ç 2 ‚Äî ‚âà340 –≥–≤–æ–∑–¥–µ–π, 5000 –Ω–∏—Ç–µ–π"},
            {"pull_amount": "5500", "label": "–í–∞—Ä–∏–∞–Ω—Ç 3 ‚Äî ‚âà340 –≥–≤–æ–∑–¥–µ–π, 5500 –Ω–∏—Ç–µ–π"},
        ]

        all_ok = True

        for idx, cfg in enumerate(configs, start=1):
            output_png = os.path.join(OUTPUT_DIR, f"{uuid.uuid4()}.png")
            expected_xlsx = f"{output_png}_instruction.xlsx"

            cmd = [
                "python", STRINGART_SCRIPT,
                "-i", input_path,
                "-o", output_png,
                "-d", "3000",
                "-s", "1",
                "-n", NAIL_STEP_FOR_340,
                "-l", cfg["pull_amount"],
                "-longside", "385",
                "--rgb",
                "--wb"
            ]

            progress_msg = await message.answer(f"‚è≥ {cfg['label']}: 0%")

            process = await asyncio.create_subprocess_exec(
                *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )

            # —á–∏—Ç–∞–µ–º stdout –ø–æ—Å—Ç—Ä–æ—á–Ω–æ ‚Äî –∂–¥—ë–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "NN%"
            last_progress = None
            while True:
                line = await process.stdout.readline()
                if not line:
                    break
                text = line.decode(errors="ignore").strip()
                if text.endswith("%") and text != last_progress:
                    last_progress = text
                    try:
                        await progress_msg.edit_text(f"‚è≥ {cfg['label']}: {text}")
                    except Exception:
                        pass

            await process.wait()
            stderr = (await process.stderr.read()).decode(errors="ignore")

            if process.returncode == 0 and os.path.exists(output_png):
                try:
                    await progress_msg.edit_text(f"‚úÖ {cfg['label']}: –≥–æ—Ç–æ–≤–æ")
                except Exception:
                    pass

                # —Ñ–∏–∫—Å–∏—Ä—É–µ–º mtime —Å—Ä–∞–∑—É
                try:
                    png_mtime = os.path.getmtime(output_png)
                except Exception:
                    png_mtime = datetime.now().timestamp()

                # –Ω–∞—Ö–æ–¥–∏–º/–∑–∞–ø–æ–º–∏–Ω–∞–µ–º Excel
                xlsx_path: Optional[str] = expected_xlsx if os.path.exists(expected_xlsx) else None
                if not xlsx_path:
                    xlsx_path = _find_instruction_near_png(output_png)
                if not xlsx_path:
                    xlsx_path = _find_recent_xlsx(OUTPUT_DIR, ref_time=png_mtime, window_sec=600)

                # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
                user_results.setdefault(uid, {})
                user_results[uid][str(idx)] = {
                    "png": output_png,
                    "xlsx": xlsx_path,
                    "png_mtime": png_mtime
                }

                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é + –∫–Ω–æ–ø–∫—É
                preview_path = None
                try:
                    preview_path = make_preview_jpeg(output_png)
                    photo_file = FSInputFile(preview_path)
                    await message.answer_photo(photo_file, caption=cfg["label"], reply_markup=kb_instruction(uid, idx))
                except Exception:
                    try:
                        doc = FSInputFile(output_png)
                        await message.answer_document(doc, caption=cfg["label"], reply_markup=kb_instruction(uid, idx))
                    except Exception as e:
                        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ¬´{cfg['label']}¬ª:\n{e}")

                if preview_path and os.path.exists(preview_path):
                    try:
                        os.remove(preview_path)
                    except:
                        pass

                if not xlsx_path:
                    await message.answer(
                        f"‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è ¬´{cfg['label']}¬ª –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. "
                        f"–ù–∞–∂–º–∏—Ç–µ ¬´üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é¬ª ‚Äî —è –ø—Ä–æ–≤–µ—Ä—é –µ—â—ë —Ä–∞–∑."
                    )
            else:
                all_ok = False
                try:
                    await progress_msg.edit_text(f"‚ùå {cfg['label']}: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                except Exception:
                    pass
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ¬´{cfg['label']}¬ª:\n{stderr}")
                if os.path.exists(output_png):
                    try:
                        os.remove(output_png)
                    except:
                        pass

        # —Å–ø–∏—Å—ã–≤–∞–µ–º 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ–¥–∞ (–æ–¥–Ω–∞ —Å–µ—Å—Å–∏—è –∏–∑ —Ç—Ä—ë—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ = –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        dec_image_use(uid)

        if all_ok:
            await message.answer(
                "üéâ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Å—Ç—É–ø–∞—é—Ç –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∂–µ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å Excel.\n\n"
                "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ? –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ¬ª –Ω–∏–∂–µ ‚¨áÔ∏è",
                reply_markup=kb_more_status(uid)
            )
        else:
            await message.answer(
                "–ì–æ—Ç–æ–≤–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏. –î–ª—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å Excel, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.",
                reply_markup=kb_more_status(uid)
            )

    finally:
        # —Å–Ω–∏–º–∞–µ–º ‚Äú–∑–∞–Ω—è—Ç–æ‚Äù
        if uid in busy_users:
            busy_users.remove(uid)

        # —á–∏—Å—Ç–∏–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        try:
            if os.path.exists(input_path):
                os.remove(input_path)
        except Exception:
            pass


# ================== –ö–ù–û–ü–ö–ò (Excel —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–∞–∂–µ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏) ==================
@dp.callback_query(F.data.startswith("choose_"))
async def handle_choice(callback: CallbackQuery):
    _, uid, idx = callback.data.split("_")
    uid = int(uid)

    # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –≤—Å—è–∫–∏–π
    user_results.setdefault(uid, {})

    if idx not in user_results[uid]:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    files = user_results[uid][idx]
    xlsx_path = files.get("xlsx")
    png_path = files.get("png")
    png_mtime = files.get("png_mtime") or (os.path.getmtime(png_path) if png_path and os.path.exists(png_path) else None)

    # –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø–æ—è–≤–∏–ª—Å—è —Ç–æ–ª—å–∫–æ —á—Ç–æ
    if (not xlsx_path) or (xlsx_path and not os.path.exists(xlsx_path)):
        if png_path and os.path.exists(png_path):
            xlsx_path = _find_instruction_near_png(png_path)
        if (not xlsx_path) and png_mtime:
            xlsx_path = _find_recent_xlsx(OUTPUT_DIR, ref_time=png_mtime, window_sec=600)
        files["xlsx"] = xlsx_path

    if xlsx_path and os.path.exists(xlsx_path):
        try:
            doc = FSInputFile(xlsx_path, filename=os.path.basename(xlsx_path))
            await callback.message.answer_document(doc, caption="üìä –í–∞—à–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (Excel)")
        except Exception as e:
            await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª:\n{e}")
        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —á–∏—Å—Ç–∏–º xlsx
        try:
            os.remove(xlsx_path)
        except:
            pass
    else:
        folder = os.path.dirname(png_path) if png_path else OUTPUT_DIR
        nearby = "\n".join(os.path.basename(p) for p in glob(os.path.join(folder, "*instruction*.xlsx")))
        await callback.message.answer(
            "‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            f"–ò—Å–∫–∞–ª —Ä—è–¥–æ–º —Å PNG –∏ –≤ {OUTPUT_DIR}.\n"
            f"PNG: {png_path}\n"
            f"–ü–∞–ø–∫–∞: {folder}\n"
            f"–ù–∞–π–¥–µ–Ω–æ —Ä—è–¥–æ–º: {nearby or '–Ω–∏—á–µ–≥–æ'}"
        )

    # PNG –æ—á–∏—â–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    if png_path and os.path.exists(png_path):
        try:
            os.remove(png_path)
        except:
            pass

    # —á–∏—Å—Ç–∏–º –∑–∞–ø–∏—Å—å
    try:
        del user_results[uid][idx]
        if not user_results[uid]:
            del user_results[uid]
    except:
        pass

    await callback.answer()


@dp.callback_query(F.data.startswith("more_"))
async def handle_more(callback: CallbackQuery):
    uid = int(callback.data.split("_")[1])
    if is_busy(uid):
        await callback.message.answer("‚è≥ –°–µ–π—á–∞—Å –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
    else:
        await callback.message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è —Å–Ω–æ–≤–∞ —Å–¥–µ–ª–∞—é —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞!")
    await callback.answer()


@dp.callback_query(F.data.startswith("status_"))
async def handle_inline_status(callback: CallbackQuery):
    uid = int(callback.data.split("_")[1])
    code = user_codes.get(uid)
    if not code:
        await callback.message.answer("‚ÑπÔ∏è –ö–æ–¥ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /status –í–ê–®_–ö–û–î")
        await callback.answer()
        return
    st = get_code_status(code)
    if not st:
        await callback.message.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await callback.message.answer(
            f"üîê –ö–æ–¥: {code}\n"
            f"üì¶ –õ–∏–º–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {st['limit']}\n"
            f"üßÆ –ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ: {st['used']}\n"
            f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å: {st['left']}"
        )
    await callback.answer()


# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
