import asyncio
import logging
import os
import uuid
import tempfile
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, FSInputFile, InlineKeyboardMarkup,
    InlineKeyboardButton, CallbackQuery
)
from PIL import Image  # –¥–ª—è JPEG-–ø—Ä–µ–≤—å—é

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
BOT_TOKEN = "7791601838:AAGKBsubpH1TzLYafINnCwz315Lf1qvkjxU"  # üî¥ –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
STRINGART_SCRIPT = os.path.join(BASE_DIR, "stringart", "generate.py")
OUTPUT_DIR = os.path.join(BASE_DIR, "output")
os.makedirs(OUTPUT_DIR, exist_ok=True)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# —à–∞–≥ –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É, –¥–∞—é—â–∏–π ‚âà340 –≥–≤–æ–∑–¥–µ–π –Ω–∞ —Ç–≤–æ—ë–º –ø–æ–ª–µ
NAIL_STEP_FOR_340 = "3"

# —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–µ–≤—å—é (—á—Ç–æ–±—ã sendPhoto –Ω–µ —Ä–æ–Ω—è–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
PREVIEW_MAX_SIDE = 1600
PREVIEW_JPEG_QUALITY = 90

# ================== –ü–°–ï–í–î–û-–ë–ê–ó–ê –ö–û–î–û–í ==================
# ‚ùóÔ∏è –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é –ë–î. –ó–¥–µ—Å—å ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞.
# –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å: {"limit": N, "used": 0, "bound_to": user_id or None}
CODES_DB = {
    "DEMO-3": {"limit": 3, "used": 0, "bound_to": None},
    "VIP-10": {"limit": 10, "used": 0, "bound_to": None},
}

# user_codes[user_id] = "CODE"
user_codes = {}

# user_results[uid][idx] = {"png": path_to_png, "xlsx": path_to_xlsx}
user_results = {}

# ================== –£–¢–ò–õ–ò–¢–´ ==================
def make_preview_jpeg(src_png: str) -> str:
    """–°–æ–∑–¥–∞—ë—Ç —É–∂–∞—Ç–æ–µ JPEG-–ø—Ä–µ–≤—å—é –¥–ª—è Telegram (<= ~1600px –ø–æ –±–æ–ª—å—à–æ–π —Å—Ç–æ—Ä–æ–Ω–µ)."""
    img = Image.open(src_png).convert("RGB")
    w, h = img.size
    k = PREVIEW_MAX_SIDE / max(w, h) if max(w, h) > PREVIEW_MAX_SIDE else 1.0
    if k < 1.0:
        img = img.resize((int(w * k), int(h * k)), Image.LANCZOS)
    prev_path = src_png.rsplit(".", 1)[0] + "_preview.jpg"
    img.save(prev_path, "JPEG", quality=PREVIEW_JPEG_QUALITY, optimize=True)
    return prev_path

def get_code_status(code: str):
    rec = CODES_DB.get(code)
    if not rec:
        return None
    return {"limit": rec["limit"], "used": rec["used"], "left": max(rec["limit"] - rec["used"], 0)}

def bind_code_to_user(uid: int, code: str):
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–æ–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —Å–≤–æ–±–æ–¥–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok: bool, msg: str)."""
    rec = CODES_DB.get(code)
    if not rec:
        return False, "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ."
    if rec["bound_to"] is None or rec["bound_to"] == uid:
        rec["bound_to"] = uid
        user_codes[uid] = code
        return True, "‚úÖ –ö–æ–¥ –ø—Ä–∏–≤—è–∑–∞–Ω."
    return False, "‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É."

def dec_use(uid: int):
    """–°–ø–∏—Å–∞—Ç—å 1 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–¥–∞, –µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω."""
    code = user_codes.get(uid)
    if not code:
        return
    rec = CODES_DB.get(code)
    if not rec:
        return
    rec["used"] = min(rec["used"] + 1, rec["limit"])

# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==================
def kb_more_status(uid: int):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ", callback_data=f"more_{uid}"),
        InlineKeyboardButton(text="‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data=f"status_{uid}")
    ]])

def kb_instruction(uid: int, idx: int):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (Excel)",
            callback_data=f"choose_{uid}_{idx}"
        )
    ]])

# ================== –ö–û–ú–ê–ù–î–´ ==================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    hello = (
        "‚ú® *StringArt –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è* \n\n"
        "–Ø –ø—Ä–µ–≤—Ä–∞—â—É –≤–∞—à–µ —Ñ–æ—Ç–æ –≤ —Ç—Ä–∏ *—Ü–≤–µ—Ç–Ω—ã—Ö* –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–∞—Ä—Ç–∏–Ω—ã –Ω–∞ *–±–µ–ª–æ–º —Ñ–æ–Ω–µ*:\n"
        "‚Ä¢ ‚âà340 –≥–≤–æ–∑–¥–µ–π, 4500 –Ω–∏—Ç–µ–π\n"
        "‚Ä¢ ‚âà340 –≥–≤–æ–∑–¥–µ–π, 5000 –Ω–∏—Ç–µ–π\n"
        "‚Ä¢ ‚âà340 –≥–≤–æ–∑–¥–µ–π, 5500 –Ω–∏—Ç–µ–π\n\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç. –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –ø—Ä–∏—à–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ Excel üìä\n\n"
        "_–ö–æ–º–∞–Ω–¥–∞_/status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/–ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ–¥ –∏ —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –æ—Å—Ç–∞–ª–æ—Å—å."
    )
    await message.answer(hello, parse_mode="Markdown")

@dp.message(Command("status"))
async def cmd_status(message: Message):
    """
    /status                 -> –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º—É –∫–æ–¥—É
    /status <CODE>          -> –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ–¥ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
    """
    uid = message.from_user.id
    args = message.text.strip().split(maxsplit=1)
    if len(args) == 2:
        code = args[1].strip()
        ok, msg = bind_code_to_user(uid, code)
        if not ok:
            await message.answer(msg)
            return

    code = user_codes.get(uid)
    if not code:
        await message.answer("‚ÑπÔ∏è –ö–æ–¥ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/status –í–ê–®_–ö–û–î`", parse_mode="Markdown")
        return

    st = get_code_status(code)
    if not st:
        await message.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await message.answer(
        f"üîê –ö–æ–¥: *{code}*\n"
        f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: *{st['left']}* –∏–∑ *{st['limit']}*\n"
        f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
        parse_mode="Markdown"
    )

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ==================
@dp.message(F.photo)
async def handle_photo(message: Message):
    uid = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∏–≤—è–∑–∫—É –∫–æ–¥–∞ –∏ –æ—Å—Ç–∞—Ç–æ–∫ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∂—ë—Å—Ç–∫–æ, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º)
    code = user_codes.get(uid)
    if code:
        st = get_code_status(code)
        if st and st["left"] <= 0:
            await message.answer(
                "‚ö†Ô∏è –ü–æ –≤–∞—à–µ–º—É –∫–æ–¥—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ `/status –ù–û–í–´–ô_–ö–û–î`.",
                parse_mode="Markdown"
            )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    photo = message.photo[-1]
    input_fd, input_path = tempfile.mkstemp(suffix=".jpg")
    os.close(input_fd)
    await bot.download(photo, destination=input_path)

    configs = [
        {"pull_amount": "4500", "label": "–í–∞—Ä–∏–∞–Ω—Ç 1 ‚Äî ‚âà340 –≥–≤–æ–∑–¥–µ–π, 4500 –Ω–∏—Ç–µ–π"},
        {"pull_amount": "5000", "label": "–í–∞—Ä–∏–∞–Ω—Ç 2 ‚Äî ‚âà340 –≥–≤–æ–∑–¥–µ–π, 5000 –Ω–∏—Ç–µ–π"},
        {"pull_amount": "5500", "label": "–í–∞—Ä–∏–∞–Ω—Ç 3 ‚Äî ‚âà340 –≥–≤–æ–∑–¥–µ–π, 5500 –Ω–∏—Ç–µ–π"},
    ]

    results = {}
    all_ok = True

    for idx, cfg in enumerate(configs, start=1):
        output_png = os.path.join(OUTPUT_DIR, f"{uuid.uuid4()}.png")
        output_xlsx = f"{output_png}_instruction.xlsx"

        # –¶–≤–µ—Ç–Ω–æ–π + –±–µ–ª—ã–π —Ñ–æ–Ω, ¬´—Å–æ—á–Ω—ã–µ¬ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∫–∞–∫ —É —Ç–µ–±—è):
        cmd = [
            "python", STRINGART_SCRIPT,
            "-i", input_path,
            "-o", output_png,
            "-d", "3000",                # dimension
            "-s", "1",                   # strength
            "-n", NAIL_STEP_FOR_340,     # ~340 –≥–≤–æ–∑–¥–µ–π (—à–∞–≥ –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É)
            "-l", cfg["pull_amount"],    # pulls
            "-longside", "385",          # long_side
            "--rgb",
            "--wb"
        ]

        progress_msg = await message.answer(f"‚è≥ {cfg['label']}: 0%")

        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        # —á–∏—Ç–∞–µ–º stdout –ø–æ—Å—Ç—Ä–æ—á–Ω–æ ‚Äî –∂–¥—ë–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "NN%"
        last_progress = None
        while True:
            line = await process.stdout.readline()
            if not line:
                break
            text = line.decode(errors="ignore").strip()
            if text.endswith("%") and text != last_progress:
                last_progress = text
                try:
                    await progress_msg.edit_text(f"‚è≥ {cfg['label']}: {text}")
                except Exception:
                    pass

        await process.wait()
        stderr = (await process.stderr.read()).decode(errors="ignore")

        if process.returncode == 0 and os.path.exists(output_png):
            try:
                await progress_msg.edit_text(f"‚úÖ {cfg['label']}: –≥–æ—Ç–æ–≤–æ")
            except Exception:
                pass

            # –¥–µ–ª–∞–µ–º JPEG-–ø—Ä–µ–≤—å—é, —á—Ç–æ–±—ã –Ω–µ —É–ø–∞—Å—Ç—å –ø–æ –ª–∏–º–∏—Ç–∞–º Telegram
            preview_path = None
            try:
                preview_path = make_preview_jpeg(output_png)
                photo_file = FSInputFile(preview_path)
                await message.answer_photo(photo_file, caption=cfg["label"], reply_markup=kb_instruction(uid, idx))
            except Exception:
                # —Ä–µ–∑–µ—Ä–≤: —à–ª—ë–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–±–µ–∑ –ø—Ä–µ–≤—å—é)
                try:
                    doc = FSInputFile(output_png)
                    await message.answer_document(doc, caption=cfg["label"], reply_markup=kb_instruction(uid, idx))
                except Exception as e:
                    await message.answer(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ¬´{cfg['label']}¬ª:\n<code>{e}</code>",
                        parse_mode="HTML"
                    )

            results[str(idx)] = {"png": output_png, "xlsx": output_xlsx}

            # —á–∏—Å—Ç–∏–º –ø—Ä–µ–≤—å—é
            if preview_path and os.path.exists(preview_path):
                try:
                    os.remove(preview_path)
                except:
                    pass

            # –ø—Ä–æ–≤–µ—Ä–∏–º, —Å–æ–∑–¥–∞–ª–∞—Å—å –ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
            if not os.path.exists(output_xlsx):
                await message.answer(
                    "‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Excel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞. "
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ `generate.py` —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤–∏–¥–∞ `<output>_instruction.xlsx` –≤ RGB-—Ä–µ–∂–∏–º–µ."
                )
        else:
            all_ok = False
            try:
                await progress_msg.edit_text(f"‚ùå {cfg['label']}: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            except Exception:
                pass
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ¬´{cfg['label']}¬ª:\n<code>{stderr}</code>",
                parse_mode="HTML"
            )
            if os.path.exists(output_png):
                try:
                    os.remove(output_png)
                except:
                    pass

    user_results[uid] = results

    # —Å–Ω–∏–º–∞–µ–º 1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (–∑–∞ –æ–¥–∏–Ω —Ü–∏–∫–ª –∏–∑ 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
    dec_use(uid)

    # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if all_ok:
        await message.answer(
            "üéâ –í—Å–µ —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≥–æ—Ç–æ–≤—ã! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é¬ª.\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ? –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ¬ª –Ω–∏–∂–µ ‚¨áÔ∏è",
            reply_markup=kb_more_status(uid)
        )
    else:
        await message.answer(
            "–ì–æ—Ç–æ–≤–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ, –ª–∏–±–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —É–¥–∞—á–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=kb_more_status(uid)
        )

    # —á–∏—Å—Ç–∏–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    if os.path.exists(input_path):
        try:
            os.remove(input_path)
        except:
            pass

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ==================
@dp.callback_query(F.data.startswith("choose_"))
async def handle_choice(callback: CallbackQuery):
    _, uid, idx = callback.data.split("_")
    uid = int(uid)

    if uid not in user_results or idx not in user_results[uid]:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    files = user_results[uid][idx]
    xlsx_path = files["xlsx"]
    png_path = files["png"]

    if os.path.exists(xlsx_path):
        doc = FSInputFile(xlsx_path)
        await callback.message.answer_document(doc, caption="üìä –í–∞—à–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (Excel)")
        try:
            os.remove(xlsx_path)
        except:
            pass
    else:
        await callback.message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å.")

    if os.path.exists(png_path):
        try:
            os.remove(png_path)
        except:
            pass

    # —É–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    try:
        del user_results[uid][idx]
        if not user_results[uid]:
            del user_results[uid]
    except:
        pass

    await callback.answer()

@dp.callback_query(F.data.startswith("more_"))
async def handle_more(callback: CallbackQuery):
    await callback.message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è —Å–Ω–æ–≤–∞ —Å–¥–µ–ª–∞—é —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞!")
    await callback.answer()

@dp.callback_query(F.data.startswith("status_"))
async def handle_inline_status(callback: CallbackQuery):
    uid = int(callback.data.split("_")[1])
    code = user_codes.get(uid)
    if not code:
        await callback.message.answer("‚ÑπÔ∏è –ö–æ–¥ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/status –í–ê–®_–ö–û–î`", parse_mode="Markdown")
        await callback.answer()
        return
    st = get_code_status(code)
    if not st:
        await callback.message.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await callback.message.answer(
            f"üîê –ö–æ–¥: *{code}*\n"
            f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: *{st['left']}* –∏–∑ *{st['limit']}*",
            parse_mode="Markdown"
        )
    await callback.answer()

# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º webhook, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å polling
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())