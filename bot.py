import asyncio
import logging
import os
import uuid
import tempfile
from glob import glob
from datetime import datetime
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, FSInputFile, InlineKeyboardMarkup,
    InlineKeyboardButton, CallbackQuery
)
from PIL import Image

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
BOT_TOKEN = "7791601838:AAGKBsubpH1TzLYafINnCwz315Lf1qvkjxU"  # <-- –ø–æ—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
STRINGART_SCRIPT = os.path.join(BASE_DIR, "stringart", "generate.py")
OUTPUT_DIR = os.path.join(BASE_DIR, "output")
os.makedirs(OUTPUT_DIR, exist_ok=True)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

NAIL_STEP_FOR_340 = "3"
PREVIEW_MAX_SIDE = 1600
PREVIEW_JPEG_QUALITY = 90

# ================== –ü–†–û–°–¢–ê–Ø "–ë–ê–ó–ê" –ö–û–î–û–í ==================
CODES_DB = {
    "DEMO-3": {"limit": 3, "used": 0, "bound_to": None},
    "VIP-10": {"limit": 10, "used": 0, "bound_to": None},
}
user_codes = {}
# user_results[uid][idx] = {"png": path_to_png, "xlsx": path_to_xlsx or None, "png_mtime": float}
user_results = {}


# ================== –£–¢–ò–õ–ò–¢–´ ==================
def make_preview_jpeg(src_png: str) -> str:
    img = Image.open(src_png).convert("RGB")
    w, h = img.size
    k = PREVIEW_MAX_SIDE / max(w, h) if max(w, h) > PREVIEW_MAX_SIDE else 1.0
    if k < 1.0:
        img = img.resize((int(w * k), int(h * k)), Image.LANCZOS)
    prev_path = src_png.rsplit(".", 1)[0] + "_preview.jpg"
    img.save(prev_path, "JPEG", quality=PREVIEW_JPEG_QUALITY, optimize=True)
    return prev_path


def get_code_status(code: str):
    rec = CODES_DB.get(code)
    if not rec:
        return None
    return {"limit": rec["limit"], "used": rec["used"], "left": max(rec["limit"] - rec["used"], 0)}


def bind_code_to_user(uid: int, code: str):
    rec = CODES_DB.get(code)
    if not rec:
        return False, "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ."
    if rec["bound_to"] is None or rec["bound_to"] == uid:
        rec["bound_to"] = uid
        user_codes[uid] = code
        return True, "‚úÖ –ö–æ–¥ –ø—Ä–∏–≤—è–∑–∞–Ω."
    return False, "‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É."


def dec_use(uid: int):
    code = user_codes.get(uid)
    if not code:
        return
    rec = CODES_DB.get(code)
    if not rec:
        return
    rec["used"] = min(rec["used"] + 1, rec["limit"])


def _find_instruction_near_png(png_path: str) -> Optional[str]:
    """
    –ò—â–µ—Ç —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä—è–¥–æ–º —Å png:
      - <png>.png_instruction.xlsx  (—Ç–≤–æ–π –∫–µ–π—Å)
      - <png>_instruction.xlsx
      - *instruction*.xlsx
    """
    folder = os.path.dirname(png_path)
    base_with_ext = os.path.basename(png_path)        # abc.png
    base_no_ext, _ = os.path.splitext(base_with_ext)  # abc

    # —Å–∞–º—ã–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞
    candidates = [
        os.path.join(folder, base_with_ext + "_instruction.xlsx"),  # abc.png_instruction.xlsx
        os.path.join(folder, base_no_ext + "_instruction.xlsx"),    # abc_instruction.xlsx
    ]
    # –ª—é–±—ã–µ instruction —Ä—è–¥–æ–º
    patterns = [
        os.path.join(folder, f"{base_no_ext}*instruction*.xlsx"),
        os.path.join(folder, f"{base_with_ext}*instruction*.xlsx"),
        os.path.join(folder, "*instruction*.xlsx"),
    ]
    for patt in patterns:
        candidates.extend(glob(patt))

    seen = []
    for c in candidates:
        if c not in seen:
            seen.append(c)

    for path in seen:
        if os.path.exists(path):
            return path
    return None


def _find_recent_xlsx(output_dir: str, ref_time: float, window_sec: int = 600) -> Optional[str]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç .xlsx –≤ –ø–∞–ø–∫–µ output, —Å–æ–∑–¥–∞–Ω–Ω—ã–π/–∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ –∫ ref_time.
    –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤ –æ–∫–Ω–µ ‚Äî –≤–µ—Ä–Ω—ë—Ç —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π .xlsx.
    """
    xlsx_files = glob(os.path.join(output_dir, "*.xlsx"))
    if not xlsx_files:
        return None

    best = None
    best_dt = None
    for path in xlsx_files:
        try:
            mtime = os.path.getmtime(path)
        except Exception:
            continue
        dt = abs(mtime - ref_time)
        if dt <= window_sec:
            if best is None or dt < best_dt:
                best = path
                best_dt = dt

    if not best:
        try:
            best = max(xlsx_files, key=lambda p: os.path.getmtime(p))
        except Exception:
            best = None
    return best


# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==================
def kb_more_status(uid: int):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ", callback_data=f"more_{uid}"),
        InlineKeyboardButton(text="‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data=f"status_{uid}")
    ]])


def kb_instruction(uid: int, idx: int):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (Excel)", callback_data=f"choose_{uid}_{idx}")
    ]])


# ================== –ö–û–ú–ê–ù–î–´ ==================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "‚ú® StringArt –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è\n\n"
        "–Ø —Å–¥–µ–ª–∞—é —Ç—Ä–∏ —Ü–≤–µ—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–∞—Ä—Ç–∏–Ω—ã –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ:\n"
        "‚Ä¢ ‚âà340 –≥–≤–æ–∑–¥–µ–π, 4500 –Ω–∏—Ç–µ–π\n"
        "‚Ä¢ ‚âà340 –≥–≤–æ–∑–¥–µ–π, 5000 –Ω–∏—Ç–µ–π\n"
        "‚Ä¢ ‚âà340 –≥–≤–æ–∑–¥–µ–π, 5500 –Ω–∏—Ç–µ–π\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –ø—Ä–∏—à–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ Excel.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ /status ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ–¥ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–æ–∫."
    )


@dp.message(Command("status"))
async def cmd_status(message: Message):
    uid = message.from_user.id
    args = message.text.strip().split(maxsplit=1)
    if len(args) == 2:
        code = args[1].strip()
        ok, msg = bind_code_to_user(uid, code)
        if not ok:
            await message.answer(msg)
            return

    code = user_codes.get(uid)
    if not code:
        await message.answer("‚ÑπÔ∏è –ö–æ–¥ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /status –í–ê–®_–ö–û–î")
        return

    st = get_code_status(code)
    if not st:
        await message.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await message.answer(
        f"üîê –ö–æ–¥: {code}\n"
        f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {st['left']} –∏–∑ {st['limit']}\n"
        f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
    )


# ================== –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ==================
@dp.message(F.photo)
async def handle_photo(message: Message):
    uid = message.from_user.id

    code = user_codes.get(uid)
    if code:
        st = get_code_status(code)
        if st and st["left"] <= 0:
            await message.answer("‚ö†Ô∏è –ü–æ –≤–∞—à–µ–º—É –∫–æ–¥—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ /status –ù–û–í–´–ô_–ö–û–î.")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    photo = message.photo[-1]
    input_fd, input_path = tempfile.mkstemp(suffix=".jpg")
    os.close(input_fd)
    await bot.download(photo, destination=input_path)

    configs = [
        {"pull_amount": "500", "label": "–í–∞—Ä–∏–∞–Ω—Ç 1 ‚Äî ‚âà340 –≥–≤–æ–∑–¥–µ–π, 4500 –Ω–∏—Ç–µ–π"},
        {"pull_amount": "500", "label": "–í–∞—Ä–∏–∞–Ω—Ç 2 ‚Äî ‚âà340 –≥–≤–æ–∑–¥–µ–π, 5000 –Ω–∏—Ç–µ–π"},
        {"pull_amount": "500", "label": "–í–∞—Ä–∏–∞–Ω—Ç 3 ‚Äî ‚âà340 –≥–≤–æ–∑–¥–µ–π, 5500 –Ω–∏—Ç–µ–π"},
    ]

    results = {}
    all_ok = True

    for idx, cfg in enumerate(configs, start=1):
        output_png = os.path.join(OUTPUT_DIR, f"{uuid.uuid4()}.png")
        expected_xlsx = f"{output_png}_instruction.xlsx"

        cmd = [
            "python", STRINGART_SCRIPT,
            "-i", input_path,
            "-o", output_png,
            "-d", "3000",
            "-s", "1",
            "-n", NAIL_STEP_FOR_340,
            "-l", cfg["pull_amount"],
            "-longside", "385",
            "--rgb",
            "--wb"
        ]

        progress_msg = await message.answer(f"‚è≥ {cfg['label']}: 0%")

        process = await asyncio.create_subprocess_exec(
            *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
        )

        # —á–∏—Ç–∞–µ–º stdout –ø–æ—Å—Ç—Ä–æ—á–Ω–æ ‚Äî –∂–¥—ë–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "NN%"
        last_progress = None
        while True:
            line = await process.stdout.readline()
            if not line:
                break
            text = line.decode(errors="ignore").strip()
            if text.endswith("%") and text != last_progress:
                last_progress = text
                try:
                    await progress_msg.edit_text(f"‚è≥ {cfg['label']}: {text}")
                except Exception:
                    pass

        await process.wait()
        stderr = (await process.stderr.read()).decode(errors="ignore")

        if process.returncode == 0 and os.path.exists(output_png):
            try:
                await progress_msg.edit_text(f"‚úÖ {cfg['label']}: –≥–æ—Ç–æ–≤–æ")
            except Exception:
                pass

            # –ø—Ä–µ–≤—å—é
            preview_path = None
            try:
                preview_path = make_preview_jpeg(output_png)
                photo_file = FSInputFile(preview_path)
                await message.answer_photo(photo_file, caption=cfg["label"], reply_markup=kb_instruction(uid, idx))
            except Exception:
                try:
                    doc = FSInputFile(output_png)
                    await message.answer_document(doc, caption=cfg["label"], reply_markup=kb_instruction(uid, idx))
                except Exception as e:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ¬´{cfg['label']}¬ª:\n{e}")

            # --- –ø–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ---
            xlsx_path: Optional[str] = None

            if os.path.exists(expected_xlsx):
                xlsx_path = expected_xlsx

            if not xlsx_path:
                xlsx_path = _find_instruction_near_png(output_png)

            if not xlsx_path:
                try:
                    png_mtime = os.path.getmtime(output_png)
                except Exception:
                    png_mtime = datetime.now().timestamp()
                xlsx_path = _find_recent_xlsx(OUTPUT_DIR, ref_time=png_mtime, window_sec=600)

            results[str(idx)] = {
                "png": output_png,
                "xlsx": xlsx_path,
                "png_mtime": os.path.getmtime(output_png)
            }

            if preview_path and os.path.exists(preview_path):
                try:
                    os.remove(preview_path)
                except:
                    pass

            if not xlsx_path:
                await message.answer(
                    "‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Excel –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é¬ª ‚Äî —è –ø—Ä–æ–≤–µ—Ä—é –µ—â—ë —Ä–∞–∑."
                )
        else:
            all_ok = False
            try:
                await progress_msg.edit_text(f"‚ùå {cfg['label']}: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            except Exception:
                pass
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ¬´{cfg['label']}¬ª:\n{stderr}")
            if os.path.exists(output_png):
                try:
                    os.remove(output_png)
                except:
                    pass

    user_results[uid] = results
    dec_use(uid)

    if all_ok:
        await message.answer(
            "üéâ –í—Å–µ —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≥–æ—Ç–æ–≤—ã! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é¬ª.\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ? –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ¬ª –Ω–∏–∂–µ ‚¨áÔ∏è",
            reply_markup=kb_more_status(uid)
        )
    else:
        await message.answer(
            "–ì–æ—Ç–æ–≤–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —É–¥–∞—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=kb_more_status(uid)
        )

    # —á–∏—Å—Ç–∏–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    if os.path.exists(input_path):
        try:
            os.remove(input_path)
        except:
            pass


# ================== –ö–ù–û–ü–ö–ò ==================
@dp.callback_query(F.data.startswith("choose_"))
async def handle_choice(callback: CallbackQuery):
    _, uid, idx = callback.data.split("_")
    uid = int(uid)

    if uid not in user_results or idx not in user_results[uid]:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    files = user_results[uid][idx]
    xlsx_path = files.get("xlsx")
    png_path = files.get("png")
    png_mtime = files.get("png_mtime") or (os.path.getmtime(png_path) if png_path and os.path.exists(png_path) else None)

    # –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –ø—É—Ç—å –ø—É—Å—Ç–æ–π/—É—Å—Ç–∞—Ä–µ–ª
    if (not xlsx_path) or (xlsx_path and not os.path.exists(xlsx_path)):
        # 1) —Ä—è–¥–æ–º —Å PNG
        if png_path and os.path.exists(png_path):
            xlsx_path = _find_instruction_near_png(png_path)
        # 2) –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ OUTPUT_DIR
        if (not xlsx_path) and png_mtime:
            xlsx_path = _find_recent_xlsx(OUTPUT_DIR, ref_time=png_mtime, window_sec=600)
        files["xlsx"] = xlsx_path  # –æ–±–Ω–æ–≤–∏–º –∫–µ—à

    if xlsx_path and os.path.exists(xlsx_path):
        try:
            doc = FSInputFile(xlsx_path, filename=os.path.basename(xlsx_path))
            await callback.message.answer_document(doc, caption="üìä –í–∞—à–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (Excel)")
        except Exception as e:
            await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª:\n{e}")
        # –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        try:
            os.remove(xlsx_path)
        except:
            pass
    else:
        # –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
        folder = os.path.dirname(png_path) if png_path else OUTPUT_DIR
        nearby = "\n".join(os.path.basename(p) for p in glob(os.path.join(folder, "*instruction*.xlsx")))
        await callback.message.answer(
            "‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            f"–ò—Å–∫–∞–ª —Ä—è–¥–æ–º —Å PNG –∏ –≤ {OUTPUT_DIR}.\n"
            f"PNG: {png_path}\n"
            f"–ü–∞–ø–∫–∞: {folder}\n"
            f"–ù–∞–π–¥–µ–Ω–æ —Ä—è–¥–æ–º: {nearby or '–Ω–∏—á–µ–≥–æ'}"
        )

    # PNG –æ—á–∏—â–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    if png_path and os.path.exists(png_path):
        try:
            os.remove(png_path)
        except:
            pass

    # —á–∏—Å—Ç–∏–º –∑–∞–ø–∏—Å—å
    try:
        del user_results[uid][idx]
        if not user_results[uid]:
            del user_results[uid]
    except:
        pass

    await callback.answer()


@dp.callback_query(F.data.startswith("more_"))
async def handle_more(callback: CallbackQuery):
    await callback.message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è —Å–Ω–æ–≤–∞ —Å–¥–µ–ª–∞—é —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞!")
    await callback.answer()


@dp.callback_query(F.data.startswith("status_"))
async def handle_inline_status(callback: CallbackQuery):
    uid = int(callback.data.split("_")[1])
    code = user_codes.get(uid)
    if not code:
        await callback.message.answer("‚ÑπÔ∏è –ö–æ–¥ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /status –í–ê–®_–ö–û–î")
        await callback.answer()
        return
    st = get_code_status(code)
    if not st:
        await callback.message.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await callback.message.answer(f"üîê –ö–æ–¥: {code}\n‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {st['left']} –∏–∑ {st['limit']}")
    await callback.answer()


# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())